[
{
	"uri": "http://localhost:1313/WS-PhamNgDo.github.io/",
	"title": "Compliance Analytics Platform with Automated Reporting",
	"tags": [],
	"description": "",
	"content": "Compliance Analytics Platform with Automated Reporting Overview This lab provides a step-by-step guide to deploy a Compliance Analytics Platform with Automated Reporting on AWS. Objectives:\nDeploy a pipeline to ingest audit logs (CloudTrail/Config/GuardDuty) → analyze (Audit Processor, Risk Engine) → store results (DynamoDB/S3) → generate reports (Athena / QuickSight) → monitor \u0026amp; alert (CloudWatch / SNS). Lab scope: Set up infrastructure using Console \u0026amp; CLI, deploy Lambda skeletons, configure Glue/Athena, create QuickSight dashboards, EventBridge rules, and alerts.\nSecurity Objectives Implement least privilege access model for Lambda / QuickSight / Athena.\nRecord a full audit trail for all infrastructure changes (CloudTrail + AWS Config).\nEncrypt data at rest (S3/DynamoDB) and in transit (HTTPS).\nPro Tips Use IAM Roles for Lambda and QuickSight instead of embedding credentials.\nEnable S3 Versioning on buckets storing logs to track historical changes.\nIf no real data is available, mock CloudTrail events to test the flow.\nStart with rule-based risk scoring before deploying ML (SageMaker).\nImportant Note Always review and restrict IAM permissions before running Lambda in production accounts. For workshops, use dev/test accounts to avoid unintended impacts.\nNội dung Introduction Prerequistes Create S3 Buckets (Logs \u0026amp; Reports) Enable CloudTrail, AWS Config, GuardDuty Create DynamoDB Tables Setting up Glue Crawler \u0026amp; Athena Create IAM Roles \u0026amp; Policies Create \u0026amp; Deploy Lambda functions Setting up EventBridge rules CloudWatch Metrics, Alarms \u0026amp; SNS QuickSight — Create Dashboard Frontend (ReactJS) Deployment Testing \u0026amp; Validation Clean up Resorces "
},
{
	"uri": "http://localhost:1313/WS-PhamNgDo.github.io/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Overview This lab provides step-by-step guidance for deploying a Compliance Analytics Platform with Automated Reporting on AWS. Objectives:\nDeploy a pipeline to ingest audit logs (CloudTrail/Config/GuardDuty) → analyze (Audit Processor, Risk Engine) → store results (DynamoDB/S3) → generate reports (Athena / QuickSight) → monitor \u0026amp; alert (CloudWatch / SNS). Lab scope: Set up infrastructure using the Console \u0026amp; CLI, deploy a Lambda skeleton, configure Glue/Athena, create a QuickSight dashboard, set up EventBridge rules, and configure alerts.\nSecurity Objectives Implement a least privilege access model for Lambda / QuickSight / Athena.\nRecord a complete audit trail for all infrastructure changes (CloudTrail + AWS Config).\nEncrypt data at rest (S3/DynamoDB) and in transit (HTTPS).\nPro Tips Use IAM Roles for Lambda and QuickSight instead of embedding credentials.\nEnable S3 Versioning for log buckets to track historical changes.\nIf no real data is available, mock CloudTrail events to test the flow.\nStart with rule-based risk scoring before deploying ML (SageMaker).\nImportant Note Always review and restrict IAM permissions before running Lambda in a production account. For workshops, use a dev/test account to avoid unintended impacts.\n"
},
{
	"uri": "http://localhost:1313/WS-PhamNgDo.github.io/2-prerequiste/",
	"title": "Prerequistes",
	"tags": [],
	"description": "",
	"content": "Prerequistes:\nAn AWS account with Administrator privileges, or permissions to create: S3, IAM, Lambda, DynamoDB, CloudTrail, Config, EventBridge, SNS, CloudWatch, Glue, Athena, QuickSight, SageMaker.\nInstall AWS CLI (v2)\nInstall Node.js 16+ (for frontend) and Python 3.9+ (for Lambda).\nOptional: Install Docker if the Lambda package includes native dependencies.\n"
},
{
	"uri": "http://localhost:1313/WS-PhamNgDo.github.io/3-creates3buckets/",
	"title": "Create S3 Buckets (Logs &amp; Reports)",
	"tags": [],
	"description": "",
	"content": "In this step, we will create S3 buckets for the purpose of storing CloudTrail/Config logs and exported reports.\nContents Purpose: Store CloudTrail/Config logs and exported reports.\nEnter the following commands in the AWS CLI to create S3 buckets:\n# Create buckets aws s3 mb s3://compliance-logs-bucket --region ap-southeast-1 aws s3 mb s3://compliance-reports-bucket --region ap-southeast-1 # Enable versioning aws s3api put-bucket-versioning --bucket compliance-logs-bucket --versioning-configuration Status=Enabled # Enable default encryption (SSE-KMS) aws s3api put-bucket-encryption --bucket compliance-logs-bucket --server-side-encryption-configuration \u0026#39;{\u0026#34;Rules\u0026#34;:[{\u0026#34;ApplyServerSideEncryptionByDefault\u0026#34;:{\u0026#34;SSEAlgorithm\u0026#34;:\u0026#34;aws:kms\u0026#34;}}]}\u0026#39; Recommendation: Create a dedicated KMS key for compliance data if separate access control policies are required.\n"
},
{
	"uri": "http://localhost:1313/WS-PhamNgDo.github.io/4-cloudtrailawsconfig/",
	"title": "Enable CloudTrail, AWS Config, GuardDuty",
	"tags": [],
	"description": "",
	"content": "With CloudTrail, AWS Config, and GuardDuty, we can monitor infrastructure behavior and configurations, ensure compliance, and detect intrusions.\nIn this section, we will enable CloudTrail, AWS Config, and GuardDuty.\nContents: CloudTrail (multi-region):\naws cloudtrail create-trail --name compliance-trail --s3-bucket-name compliance-logs-bucket --is-multi-region-trail aws cloudtrail start-logging --name compliance-trail AWS Config: Set up a recorder to log configuration changes. (Console recommended for first-time setup — choose “All resources” and specify the output S3 bucket). GuardDuty: Enable the service to detect suspicious behavior:\naws guardduty create-detector --enable "
},
{
	"uri": "http://localhost:1313/WS-PhamNgDo.github.io/5-dynamodbtables/",
	"title": "Create DynamoDB Tables",
	"tags": [],
	"description": "",
	"content": "DynamoDB will store violation information or audit events processed from CloudTrail.\naws dynamodb create-table --table-name ComplianceRules \\ --attribute-definitions AttributeName=rule_id,AttributeType=S \\ --key-schema AttributeName=rule_id,KeyType=HASH \\ --billing-mode PAY_PER_REQUEST aws dynamodb create-table --table-name AuditResults \\ --attribute-definitions AttributeName=audit_id,AttributeType=S AttributeName=resource_id,AttributeType=S \\ --key-schema AttributeName=audit_id,KeyType=HASH \\ --global-secondary-indexes \u0026#39;[{\u0026#34;IndexName\u0026#34;:\u0026#34;ResourceIndex\u0026#34;,\u0026#34;KeySchema\u0026#34;:[{\u0026#34;AttributeName\u0026#34;:\u0026#34;resource_id\u0026#34;,\u0026#34;KeyType\u0026#34;:\u0026#34;HASH\u0026#34;}],\u0026#34;Projection\u0026#34;:{\u0026#34;ProjectionType\u0026#34;:\u0026#34;ALL\u0026#34;}}]\u0026#39; \\ --billing-mode PAY_PER_REQUEST "
},
{
	"uri": "http://localhost:1313/WS-PhamNgDo.github.io/6-gluecrawathena/",
	"title": "Setting up Glue Crawler &amp; Athena",
	"tags": [],
	"description": "",
	"content": "See more details on setting up Glue Crawler \u0026amp; Athena\nCreate a Glue Crawler pointing to s3://compliance-logs-bucket/CloudTrail/ to populate the Data Catalog.\nIn Athena, use the database created by Glue or create a table manually if preferred. Quick check:\nSELECT eventTime, eventName, userIdentity.userName, awsRegion FROM cloudtrail_logs LIMIT 10; "
},
{
	"uri": "http://localhost:1313/WS-PhamNgDo.github.io/7-iamroles-policies/",
	"title": "Create IAM Roles &amp; Policies",
	"tags": [],
	"description": "",
	"content": "Role: lambda-compliance-role (trust policy):\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [{\u0026#34;Effect\u0026#34;:\u0026#34;Allow\u0026#34;,\u0026#34;Principal\u0026#34;:{\u0026#34;Service\u0026#34;:\u0026#34;lambda.amazonaws.com\u0026#34;},\u0026#34;Action\u0026#34;:\u0026#34;sts:AssumeRole\u0026#34;}] } Inline policy — Lambda:\n{ \u0026#34;Version\u0026#34;:\u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;:[ {\u0026#34;Effect\u0026#34;:\u0026#34;Allow\u0026#34;,\u0026#34;Action\u0026#34;:[\u0026#34;s3:GetObject\u0026#34;,\u0026#34;s3:PutObject\u0026#34;],\u0026#34;Resource\u0026#34;:[\u0026#34;arn:aws:s3:::compliance-logs-bucket/*\u0026#34;,\u0026#34;arn:aws:s3:::compliance-reports-bucket/*\u0026#34;]}, {\u0026#34;Effect\u0026#34;:\u0026#34;Allow\u0026#34;,\u0026#34;Action\u0026#34;:[\u0026#34;dynamodb:PutItem\u0026#34;,\u0026#34;dynamodb:GetItem\u0026#34;,\u0026#34;dynamodb:Query\u0026#34;],\u0026#34;Resource\u0026#34;:[\u0026#34;arn:aws:dynamodb:ap-southeast-1:ACCOUNT_ID:table/AuditResults\u0026#34;,\u0026#34;arn:aws:dynamodb:ap-southeast-1:ACCOUNT_ID:table/ComplianceRules\u0026#34;]}, {\u0026#34;Effect\u0026#34;:\u0026#34;Allow\u0026#34;,\u0026#34;Action\u0026#34;:[\u0026#34;logs:CreateLogGroup\u0026#34;,\u0026#34;logs:CreateLogStream\u0026#34;,\u0026#34;logs:PutLogEvents\u0026#34;],\u0026#34;Resource\u0026#34;:\u0026#34;*\u0026#34;}, {\u0026#34;Effect\u0026#34;:\u0026#34;Allow\u0026#34;,\u0026#34;Action\u0026#34;:[\u0026#34;sns:Publish\u0026#34;],\u0026#34;Resource\u0026#34;:\u0026#34;*\u0026#34;}, {\u0026#34;Effect\u0026#34;:\u0026#34;Allow\u0026#34;,\u0026#34;Action\u0026#34;:[\u0026#34;sagemaker:InvokeEndpoint\u0026#34;],\u0026#34;Resource\u0026#34;:\u0026#34;*\u0026#34;} ] } Replace ACCOUNT_ID by your account ID.\n"
},
{
	"uri": "http://localhost:1313/WS-PhamNgDo.github.io/8-createdeploylambdafunctions/",
	"title": "Create &amp; Deploy Lambda functions",
	"tags": [],
	"description": "",
	"content": "Divide into 3 main Lambdas:\nAudit Processor: Parse CloudTrail/Config logs, apply rules, insert violations into DynamoDB, publish metrics/alerts.\nRisk Engine: Perform rule-based scoring or invoke a SageMaker endpoint.\nReport Generator: Run Athena queries, generate CSV/PDF files, store them in S3, and/or trigger a QuickSight refresh.\n7.1 Package \u0026amp; deploy (CLI example) # Packaging mkdir package \u0026amp;\u0026amp; cd package pip install -r ../requirements.txt -t . cp ../audit_processor.py . zip -r ../audit_processor.zip . # Create Lambda aws lambda create-function --function-name audit-processor \\ --runtime python3.9 --role arn:aws:iam::ACCOUNT_ID:role/lambda-compliance-role \\ --handler audit_processor.lambda_handler --zip-file fileb://audit_processor.zip --timeout 120 --memory-size 512 7.2 Audit Processor (skeleton) — key points: Input: S3 ObjectCreated event (CloudTrail delivery) or scheduled run.\nSteps:\nDownload object from S3.\nParse CloudTrail JSON events.\nFor each event: evaluate rules from ComplianceRules table.\nIf a violation is found: put the item into AuditResults, publish the ViolationCount CloudWatch metric, send an SNS notification if severity is high. Skeleton snippet:\nimport json, boto3 s3 = boto3.client(\u0026#39;s3\u0026#39;) ddb = boto3.resource(\u0026#39;dynamodb\u0026#39;) cloudwatch = boto3.client(\u0026#39;cloudwatch\u0026#39;) sns = boto3.client(\u0026#39;sns\u0026#39;) RULES_TABLE = \u0026#39;ComplianceRules\u0026#39; RESULTS_TABLE = \u0026#39;AuditResults\u0026#39; def lambda_handler(event, context): # parse S3 event -\u0026gt; get object key -\u0026gt; read CloudTrail # evaluate rules -\u0026gt; write to DynamoDB -\u0026gt; publish metric return {\u0026#39;status\u0026#39;:\u0026#39;ok\u0026#39;} 7.3 Risk Engine (approach): Option A: Score based on rules directly in Lambda (faster startup).\nOption B: Call a SageMaker endpoint to score risk using machine learning (requires training data). Invoke SageMaker example:\nsm = boto3.client(\u0026#39;sagemaker-runtime\u0026#39;) resp = sm.invoke_endpoint(EndpointName=\u0026#39;risk-endpoint\u0026#39;, ContentType=\u0026#39;application/json\u0026#39;, Body=json.dumps(payload)) score = float(resp[\u0026#39;Body\u0026#39;].read().decode(\u0026#39;utf-8\u0026#39;)) 7.4 Report Generator (Athena → S3): Start an Athena query to generate a CSV file.\nWait for the query to complete successfully, then copy the results into the compliance-reports-bucket.\n"
},
{
	"uri": "http://localhost:1313/WS-PhamNgDo.github.io/9-eventbridgerules/",
	"title": "Setting up EventBridge rules",
	"tags": [],
	"description": "",
	"content": "CloudTrail (multi-region): Use case: Trigger the Audit Processor when CloudTrail delivers logs or when specific API calls occur (PutBucketPolicy, CreateUser, AttachRolePolicy, \u0026hellip;).\nExample rule (object creation in S3 via CloudTrail):\naws events put-rule --name \u0026#34;S3ObjectCreatedCompliance\u0026#34; --event-pattern \u0026#39;{\u0026#34;source\u0026#34;:[\u0026#34;aws.s3\u0026#34;],\u0026#34;detail-type\u0026#34;:[\u0026#34;AWS API Call via CloudTrail\u0026#34;],\u0026#34;detail\u0026#34;:{\u0026#34;eventName\u0026#34;:[\u0026#34;PutObject\u0026#34;,\u0026#34;CompleteMultipartUpload\u0026#34;]}}\u0026#39; aws events put-targets --rule S3ObjectCreatedCompliance --targets \u0026#39;Id\u0026#39;=\u0026#39;1\u0026#39;,\u0026#39;Arn\u0026#39;=\u0026#39;arn:aws:lambda:ap-southeast-1:ACCOUNT_ID:function:audit-processor\u0026#39; "
},
{
	"uri": "http://localhost:1313/WS-PhamNgDo.github.io/10-cloudwatchmetricsalarmssns/",
	"title": "CloudWatch Metrics, Alarms &amp; SNS",
	"tags": [],
	"description": "",
	"content": " Create SNS topic compliance-alerts and subscribe to email/Slack webhook. aws sns create-topic --name compliance-alerts aws sns subscribe --topic-arn arn:aws:sns:ap-southeast-1:ACCOUNT_ID:compliance-alerts --protocol email --notification-endpoint you@example.com In Lambda, publish metric: cloudwatch.put_metric_data(Namespace=\u0026#39;Compliance\u0026#39;, MetricData=[{\u0026#39;MetricName\u0026#39;:\u0026#39;ViolationCount\u0026#39;,\u0026#39;Value\u0026#39;:1,\u0026#39;Unit\u0026#39;:\u0026#39;Count\u0026#39;}]) Create alarm (threshold = 1 violation): aws cloudwatch put-metric-alarm --alarm-name HighViolationCount --metric-name ViolationCount --namespace \u0026#34;Compliance\u0026#34; --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --alarm-actions arn:aws:sns:ap-southeast-1:ACCOUNT_ID:compliance-alerts "
},
{
	"uri": "http://localhost:1313/WS-PhamNgDo.github.io/11-quicksight/",
	"title": "QuickSight — Create Dashboard",
	"tags": [],
	"description": "",
	"content": " Enable QuickSight for the account and assign permissions. (see more about QuickSight QuickSight.)\nData source: Athena (using the Glue Data Catalog) or direct S3 CSV.\nCreate visuals: violations over time, top resources by violations, remediation status, risk distribution.\nSchedule dataset refresh (if needed).\n"
},
{
	"uri": "http://localhost:1313/WS-PhamNgDo.github.io/12-frontendreactjsdeployment/",
	"title": "Frontend (ReactJS) Deployment",
	"tags": [],
	"description": "",
	"content": " Build frontend: npm install npm run build Deploy static files to S3: aws s3 sync build/ s3://compliance-frontend-bucket --delete (Optional) Configure CloudFront + ACM for HTTPS. "
},
{
	"uri": "http://localhost:1313/WS-PhamNgDo.github.io/13-testingvalidation/",
	"title": "Testing &amp; Validation",
	"tags": [],
	"description": "",
	"content": " Create a compliance violation — e.g., make an S3 bucket public or modify its policy.\nCloudTrail records the event.\nEventBridge triggers the Lambda (Audit Processor).\nLambda logs the violation into DynamoDB or S3.\nThe CloudWatch metric ViolationCount increases.\nSNS sends an alert (email/SMS).\nQuickSight/dashboard updates to reflect the violation.\n# Giả lập upload file CloudTrail để test aws s3 cp sample_cloudtrail_event.json s3://compliance-logs-bucket/CloudTrail/test-event.json Verify Steps\nCloudWatch Logs: Go to AWS Console → CloudWatch → Logs → find the log group /aws/lambda/audit-processor (example) → check the most recent Log Stream to see if the Lambda processed the event.\nDynamoDB: Run the command below or check in the Console to confirm the violation record was inserted:\naws dynamodb query \\ --table-name AuditResults \\ --index-name ResourceIndex \\ --key-condition-expression \u0026#34;resource_id = :r\u0026#34; \\ --expression-attribute-values \u0026#39;{\u0026#34;:r\u0026#34;:{\u0026#34;S\u0026#34;:\u0026#34;arn:aws:s3:::example-bucket\u0026#34;}}\u0026#39; CloudWatch Metrics \u0026amp; Alarms: Go to Metrics → namespace “Compliance” → check ViolationCount. Verify that the HighViolationCount alarm changes state to ALARM.\nSNS Alerts: Check email/SMS or Slack webhook to see if the alert was received. You can also verify via CLI:\naws sns list-subscriptions \\ --query \u0026#34;Subscriptions[?TopicArn==\u0026#39;arn:aws:sns:ap-southeast-1:ACCOUNT_ID:compliance-alerts\u0026#39;]\u0026#34; QuickSight Dashboard: In QuickSight → Refresh the dataset if needed → open the dashboard to confirm that new data has appeared. Acceptance Criteria\nLambda processes the event within \u0026lt; 30 seconds.\nViolation is recorded in DynamoDB within \u0026lt; 60 seconds.\nSNS alert is sent within \u0026lt; 2 minutes.\nQuickSight reflects the new data within the refresh window (typically ≤ 5 minutes).\n"
},
{
	"uri": "http://localhost:1313/WS-PhamNgDo.github.io/14-cleanupresorces/",
	"title": "Clean up resorces",
	"tags": [],
	"description": "",
	"content": "13.1 – Delete Lambda Functions\naws lambda delete-function --function-name audit-processor aws lambda delete-function --function-name risk-engine aws lambda delete-function --function-name report-generator 13.2 – Remove EventBridge Rules \u0026amp; Targets\naws events remove-targets --rule S3ObjectCreatedCompliance --ids 1 aws events delete-rule --name S3ObjectCreatedCompliance 13.3 – Delete SNS Topic\naws sns delete-topic --topic-arn arn:aws:sns:ap-southeast-1:ACCOUNT_ID:compliance-alerts 13.4 – Delete QuickSight Resources\nUsually, you need to go to the QuickSight Console → Manage data → Delete datasets and dashboards manually.13.5 – Delete Glue Crawlers / Databases\naws glue delete-crawler --name compliance-logs-crawler aws glue delete-database --name compliance_db 13.6 – Cleanup Athena Query Output\nDelete the query result folders in the S3 buckets, if any.\nDrop Athena databases/tables if needed. 13.7 – Delete DynamoDB Tables\naws dynamodb delete-table --table-name AuditResults aws dynamodb delete-table --table-name ComplianceRules 13.8 – Empty \u0026amp; Delete S3 Buckets If the bucket does not have versioning enabled:\naws s3 rm s3://compliance-logs-bucket --recursive aws s3 rb s3://compliance-logs-bucket If versioning is enabled, you need to delete each version individually or use a special script to clean up.\n13.9 – Disable CloudTrail, Config, GuardDuty\r```bash\raws cloudtrail stop-logging --name compliance-trail\raws cloudtrail delete-trail --name compliance-trail\raws configservice stop-configuration-recorder --configuration-recorder-name default\rDET_ID=$(aws guardduty list-detectors --query \u0026#39;DetectorIds[0]\u0026#39; --output text)\raws guardduty delete-detector --detector-id $DET_ID 13.10 – Remove IAM Roles \u0026amp; Policies\naws iam delete-role-policy --role-name lambda-compliance-role --policy-name LambdaComplianceInlinePolicy aws iam delete-role --role-name lambda-compliance-role 13.11 – Final Verification \u0026amp; Billing Go to the AWS Console → verify that resources (S3, Lambda, DynamoDB, QuickSight, etc.) have been deleted.\nCheck the AWS Billing Dashboard to ensure there are no unexpected charges.\n"
},
{
	"uri": "http://localhost:1313/WS-PhamNgDo.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/WS-PhamNgDo.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]